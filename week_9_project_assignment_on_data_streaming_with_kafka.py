# -*- coding: utf-8 -*-
"""Week 9 project assignment on Data Streaming with Kafka.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TDB3ZIcKVysdPb5AXP13yBJFGQJbs6JX
"""

# Data Streaming with Kafka

#importing significant libraries 

from confluent_kafka import Producer
import json

# Creating a Kafka producer instance
bootstrap_servers = 'localhost:2023'
producer = Producer({'bootstrap.servers': bootstrap_servers})

# Defining the topic and kafka producer

topic = 'm_money_transactions'

# Read data from a file and send it to the Kafka cluster
with open('transactions.json', 'r') as f:
    for line in f:
        # Convert each line to a JSON object
        data = json.loads(line)
        # Send the data to the Kafka cluster
        producer.produce(topic, value=json.dumps(data).encode('utf-8'))

# Flush any pending messages to the Kafka cluster
producer.flush()

# Close the Kafka producer
producer.close()

#creating kafka consumer

from confluent_kafka import Consumer
import json

bootstrap_servers = 'localhost:2023'
consumer = Consumer({'bootstrap.servers': bootstrap_servers, 'group.id': 'my_consumer_group', 'auto.offset.reset': 'earliest'})
consumer.subscribe(['m_money_transactions'])

try:
    for message in consumer:
        data = json.loads(message.value().decode('utf-8'))
        # Perform data processing and analysis as needed
        print(f"Transaction ID: {data['transaction_id']}")
        print(f"Transaction Amount: {data['transaction_amount']}")
except KeyboardInterrupt:
    pass
finally:
    consumer.close()

# Data processing and analysis
# Define lists to store transaction amounts for visualization
transaction_amounts = []

# Read messages from the Kafka cluster and process them
try:
    for message in consumer:
        # Convert the message to a JSON object
        data = json.loads(message.value().decode('utf-8'))

        # Extract transaction amount
        transaction_amount = data['transaction_amount']
        transaction_amounts.append(transaction_amount)

        # Perform other data processing and analysis as needed

        # Example: Print transaction ID and visualize transaction amount
        print(f"Transaction ID: {data['transaction_id']}")
        print(f"Transaction Amount: {transaction_amount}")

        # Visualize transaction amounts
        plt.plot(transaction_amounts)
        plt.xlabel('Transaction')
        plt.ylabel('Amount')
        plt.title('Transaction Amounts Over Time')
        plt.show()